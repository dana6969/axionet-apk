import ExpoModulesCore
import Foundation
import ExternalAccessory

public class ExpoBluetoothClassicModule: Module {
  private var session: EASession?
  private var accessory: EAAccessory?
  private let accessoryManager = EAAccessoryManager.shared()
  // Each module class must implement the definition function. The definition consists of components
  // that describes the module's functionality and behavior.
  // See https://docs.expo.dev/modules/module-api for more details about available components.
  public func definition() -> ModuleDefinition {
    // Sets the name of the module that JavaScript code will use to refer to the module. Takes a string as an argument.
    // Can be inferred from module's class name, but it's recommended to set it explicitly for clarity.
    // The module will be accessible from `requireNativeModule('ExpoBluetoothClassic')` in JavaScript.
    Name("ExpoBluetoothClassic")

    // Sets constant properties on the module. Can take a dictionary or a closure that returns a dictionary.
    Constants([
      "PI": Double.pi
    ])

    // Defines event names that the module can send to JavaScript.
    Events("onChange")

    // Defines a JavaScript synchronous function that runs the native code on the JavaScript thread.
    Function("hello") {
      return "Hello world! üëã"
    }

    // Defines a JavaScript function that always returns a Promise and whose native code
    // is by default dispatched on the different thread than the JavaScript runtime runs on.
    AsyncFunction("setValueAsync") { (value: String) in
      // Send an event to JavaScript.
      self.sendEvent("onChange", [
        "value": value
      ])
    }

    // Enables the module to be used as a native view. Definition components that are accepted as part of the
    // view definition: Prop, Events.
    View(ExpoBluetoothClassicView.self) {
      // Defines a setter for the `url` prop.
      Prop("url") { (view: ExpoBluetoothClassicView, url: URL) in
        if view.webView.url != url {
          view.webView.load(URLRequest(url: url))
        }
      }

      Events("onLoad")
    }
    // Ïó∞Í≤∞Îêú Ïû•Ïπò Î™©Î°ù Î∞òÌôò
    AsyncFunction("getConnectedDevices") -> [[String: String]] {
      let connectedDevices = self.accessoryManager.connectedAccessories.map { accessory in
        [
          "name": accessory.name,
          "manufacturer": accessory.manufacturer,
          "model": accessory.modelNumber,
          "serialNumber": accessory.serialNumber,
          "protocols": accessory.protocolStrings.joined(separator: ",")
        ]
      }
      return connectedDevices
    }

    // ÌäπÏ†ï Ïû•ÏπòÏôÄ Ïó∞Í≤∞
    AsyncFunction("connectToDevice") { (protocolName: String) in
      guard let accessory = self.accessoryManager.connectedAccessories.first(where: { $0.protocolStrings.contains(protocolName) }) else {
        throw BluetoothError("Device with protocol \(protocolName) not found")
      }

      self.accessory = accessory
      self.session = EASession(accessory: accessory, forProtocol: protocolName)

      guard let session = self.session else {
        throw BluetoothError("Failed to create session with protocol \(protocolName)")
      }

      session.inputStream?.delegate = self
      session.inputStream?.schedule(in: .current, forMode: .default)
      session.inputStream?.open()

      session.outputStream?.delegate = self
      session.outputStream?.schedule(in: .current, forMode: .default)
      session.outputStream?.open()
    }

    // Ïû•ÏπòÎ°ú Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
    AsyncFunction("sendData") { (data: String) in
      guard let session = self.session, let outputStream = session.outputStream else {
        throw BluetoothError("No active session to send data")
      }

      let dataToSend = data.data(using: .utf8)!
      let bytesWritten = dataToSend.withUnsafeBytes {
        outputStream.write($0.bindMemory(to: UInt8.self).baseAddress!, maxLength: dataToSend.count)
      }

      if bytesWritten <= 0 {
        throw BluetoothError("Failed to send data")
      }
    }

    // ÏÑ∏ÏÖò Ï¢ÖÎ£å
    AsyncFunction("disconnect") {
      self.session?.inputStream?.close()
      self.session?.inputStream?.remove(from: .current, forMode: .default)

      self.session?.outputStream?.close()
      self.session?.outputStream?.remove(from: .current, forMode: .default)

      self.session = nil
      self.accessory = nil
    }
  }
}
