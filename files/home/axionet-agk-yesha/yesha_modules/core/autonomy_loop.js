import fs from "fs"; import path from "path"; import { fileURLToPath } from "url"; import { resolveSymbol } from "./symbol_resolver.js"; const __filename = fileURLToPath(import.meta.url); const __dirname = path.dirname(__filename); const queuePath = path.join(__dirname, "../memory/symbolic_queue.json"); export async function startAutonomyLoop() { console.log("‚úÖ Yehsa AGI: Autonomy loop ACTIVE ‚Äì Real Symbol Resolution"); if (!fs.existsSync(queuePath)) { console.error("‚ùå Symbolic queue not found."); return; } const queueRaw = fs.readFileSync(queuePath, "utf-8"); let queue = []; try { queue = JSON.parse(queueRaw); } catch (err) { console.error("‚ùå Invalid symbolic queue JSON"); return; } for (const item of queue) { const symbol = item?.symbol; if (!symbol) continue; const response = resolveSymbol(symbol); console.log(`üß† Symbol: ${symbol} ‚ûú üß¨ Response: ${response}`); } }
