import coreReasoner from "./core_reasoner.js"; import { dispatchAction } from "../core/action_dispatcher.js"; import { appendMemory } from "./memory_utilities.js"; import { parseSemanticInput } from "../semantic/semantic_parser.js"; import fs from "fs"; const chainPath = "logs/symbol_chain.log"; export function logSymbolInteraction(input, context) { let symbols = input; if (typeof input === "string") { const parsed = parseSemanticInput(input); symbols = parsed.linkedSymbols; context = parsed.intent || context; } const result = coreReasoner(symbols, { context }); dispatchAction(result); appendMemory({ timestamp: new Date().toISOString(), symbols, reasoning: result, context }); const logLine = `[${new Date().toISOString()}] âž¤ Symbols: ${symbols.join(", ")} | Action: ${result.action} (${result.level || result.depth || "neutral"}) | Context: ${context}`; console.log(logLine); const entry = { timestamp: new Date().toISOString(), symbols, reasoning: result, context }; const data = fs.existsSync(chainPath) ? JSON.parse(fs.readFileSync(chainPath, "utf-8")) : []; data.push(entry); fs.writeFileSync(chainPath, JSON.stringify(data, null, 2)); }
