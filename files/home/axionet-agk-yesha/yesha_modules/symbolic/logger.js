import coreReasoner from "./core_reasoner.js"; import { dispatchAction } from "../core/action_dispatcher.js"; import { appendMemory } from "./memory_utilities.js"; import { formatSymbolicResponse } from "./symbolic_response_formatter.js"; import fs from "fs"; const chainPath = "logs/symbol_chain.log"; export function logSymbolInteraction(symbols, context) { const result = coreReasoner(symbols, { context }); dispatchAction(result); appendMemory({ timestamp: new Date().toISOString(), symbols, reasoning: result, context }); const logLine = formatSymbolicResponse({ symbols, reasoning: result, context }); console.log(logLine); const data = fs.existsSync(chainPath) ? JSON.parse(fs.readFileSync(chainPath, "utf-8")) : []; data.push({ timestamp: new Date().toISOString(), symbols, reasoning: result, context }); fs.writeFileSync(chainPath, JSON.stringify(data, null, 2)); }
