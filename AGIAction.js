const fs = require('fs'); const exec = require('child_process').exec; let lastLen = 0; const triggers = [ { pattern: /shutdown/i, action: () => exec('termux-shutdown') }, { pattern: /LORA_FAKE/i, action: () => exec('termux-tts-speak "LoRa signal detected"') }, { pattern: /BLE/i, action: () => exec('termux-tts-speak "BLE device detected"') } ]; setInterval(() => { try { const memory = JSON.parse(fs.readFileSync('mesh.memory.json','utf8')); let log = []; if (fs.existsSync('agi.reactions.json')) log = JSON.parse(fs.readFileSync('agi.reactions.json','utf8')); if (memory.length > lastLen) { const newEntries = memory.slice(lastLen); newEntries.forEach(entry => { const msg = JSON.stringify(entry); triggers.forEach(t => { if (t.pattern.test(msg)) { console.log('[AGIAction] ⚡ Trigger matched:', t.pattern); t.action(); log.push({ts: new Date().toISOString(), match: t.pattern.toString(), entry}); } }); }); fs.writeFileSync('agi.reactions.json', JSON.stringify(log,null,2)); lastLen = memory.length; } } catch (e) { console.log('[AGIAction] ❌ Error:', e.message); } }, 3000);
